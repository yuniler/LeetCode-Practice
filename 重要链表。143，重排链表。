/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        //方法，将链表切割成fast和slow
        //将right翻转 最后将slow和fast连起来
        //重要!
        
        ListNode fast = head, slow = head;
        //求中点
        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
//right就是右半部分 12345 就是45  1234 就是34
        ListNode right = slow.next; 
        //断开
        slow.next = null;

        //翻转右
        right = reverseList(right);
        ListNode left = head;//左部起点

        //连起来,左部一定大于右部，最后一个直接左边连上
        while(right != null){
            ListNode curLeft = left.next;
            left.next = right;
            left = curLeft;

            ListNode curRight = right.next;
            right.next = left;
            right = curRight;
        }


    }

    //翻转链表
    public ListNode reverseList(ListNode head){
        ListNode headNode = new ListNode(0);
        ListNode cur = head;
        ListNode next = null;

        while(cur != null){
            next = cur.next;
            cur.next = headNode.next;
            headNode.next = cur;
            cur = next;
        }
        return headNode.next;
    }
}
